tape { & 2  | 9 0 0 & }
let Numbers { 0 1 2 3 4 5 6 7 8 9 }
let N10 { (0 1) (1 2) (2 3) (3 4) (4 5) (5 6) (6 7) (7 8) (8 9) }
let P10 { (1 0) (2 1) (3 2) (4 3) (5 4) (6 5) (7 6) (8 7) (9 8) }

case Start & & -> (Pick (idx 0))

-- pick digit n at i from L
-- go to digit n2 at i from R
-- add digits:

for (n n_prev) in P10
for (n2 n2_succ) in N10
for (i i_succ) in N10 
for (i2 i_prev) in P10 
{
	case (Pick (idx i)) 0 0 -> (Pick (idx i_succ))
	case (Pick (idx i)) | | -> DONE
	case (Pick (idx i)) n 0 -> (Pick n (idx i))

	case (Pick n (idx i)) n2 n2 -> (Pick n (idx i))
	case (Pick n (idx i)) | | -> (Travel n (idx i))

	case (Travel 0 (idx 0)) n2 n2 -> RESET
	case (Travel 1 (idx 0)) 9 0 -> (Travel 1 (idx 0))
	case (Travel n (idx 0)) 9 0 -> (AddPrev n_prev (idx 0))
	case (Travel n (idx 0)) n2 n2_succ -> (AddPrev n_prev (idx 0))
	case (AddPrev 0 (idx 0)) n2 n2 <- RESET
	case (AddPrev n (idx 0)) n2 n2 <- (Travel n (idx 0))

	case (Travel n (idx i2)) n2 n2 -> (Travel n (idx i_prev))

	for * in Numbers case RESET * * <- RESET

	case RESET | | <- RESET
	case RESET & & -> (Pick (idx 0))
}
